
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000338  000003ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000338  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  000003be  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000140  00000000  00000000  000003de  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000075b  00000000  00000000  0000051e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000243  00000000  00000000  00000c79  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000696  00000000  00000000  00000ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000110  00000000  00000000  00001554  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001e5  00000000  00000000  00001664  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000022f  00000000  00000000  00001849  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e3       	ldi	r30, 0x38	; 56
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 76 01 	call	0x2ec	; 0x2ec <main>
  8e:	0c 94 9a 01 	jmp	0x334	; 0x334 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <spi_transfer>:
#define T4S 8
#define T8S 9

// SPI transfer 1 byte and return the result
uint8_t spi_transfer(uint8_t data) {
	SPDR = data;
  96:	8e bd       	out	0x2e, r24	; 46
	
	while(!(SPSR & (1<<SPIF)));
  98:	0d b4       	in	r0, 0x2d	; 45
  9a:	07 fe       	sbrs	r0, 7
  9c:	fd cf       	rjmp	.-6      	; 0x98 <spi_transfer+0x2>

	return SPDR;
  9e:	8e b5       	in	r24, 0x2e	; 46
}
  a0:	08 95       	ret

000000a2 <spi_write_data>:

// Write data using SPI
void spi_write_data(uint8_t * dataout, uint8_t len) {
  a2:	fc 01       	movw	r30, r24
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	08 c0       	rjmp	.+16     	; 0xb8 <spi_write_data+0x16>
	uint8_t i;
	for (i = 0; i < len; i++) {
		spi_transfer(dataout[i]);
  a8:	80 81       	ld	r24, Z
#define T4S 8
#define T8S 9

// SPI transfer 1 byte and return the result
uint8_t spi_transfer(uint8_t data) {
	SPDR = data;
  aa:	8e bd       	out	0x2e, r24	; 46
	
	while(!(SPSR & (1<<SPIF)));
  ac:	0d b4       	in	r0, 0x2d	; 45
  ae:	07 fe       	sbrs	r0, 7
  b0:	fd cf       	rjmp	.-6      	; 0xac <spi_write_data+0xa>

	return SPDR;
  b2:	8e b5       	in	r24, 0x2e	; 46
}

// Write data using SPI
void spi_write_data(uint8_t * dataout, uint8_t len) {
	uint8_t i;
	for (i = 0; i < len; i++) {
  b4:	9f 5f       	subi	r25, 0xFF	; 255
  b6:	31 96       	adiw	r30, 0x01	; 1
  b8:	96 17       	cp	r25, r22
  ba:	b0 f3       	brcs	.-20     	; 0xa8 <spi_write_data+0x6>
		spi_transfer(dataout[i]);
	}
}
  bc:	08 95       	ret

000000be <spi_read_data>:

// Read data using SPI
void spi_read_data(uint8_t * datain, uint8_t len) {
  be:	fc 01       	movw	r30, r24
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	07 c0       	rjmp	.+14     	; 0xd2 <spi_read_data+0x14>
#define T4S 8
#define T8S 9

// SPI transfer 1 byte and return the result
uint8_t spi_transfer(uint8_t data) {
	SPDR = data;
  c4:	1e bc       	out	0x2e, r1	; 46
	
	while(!(SPSR & (1<<SPIF)));
  c6:	0d b4       	in	r0, 0x2d	; 45
  c8:	07 fe       	sbrs	r0, 7
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <spi_read_data+0x8>

	return SPDR;
  cc:	8e b5       	in	r24, 0x2e	; 46

// Read data using SPI
void spi_read_data(uint8_t * datain, uint8_t len) {
	uint8_t i;
	for (i = 0; i < len; i++) {
		datain[i] = spi_transfer(0x00);
  ce:	81 93       	st	Z+, r24
}

// Read data using SPI
void spi_read_data(uint8_t * datain, uint8_t len) {
	uint8_t i;
	for (i = 0; i < len; i++) {
  d0:	9f 5f       	subi	r25, 0xFF	; 255
  d2:	96 17       	cp	r25, r22
  d4:	b8 f3       	brcs	.-18     	; 0xc4 <spi_read_data+0x6>
		datain[i] = spi_transfer(0x00);
	}
}
  d6:	08 95       	ret

000000d8 <spi_init>:

// Initialise the SPI
void spi_init(void) {
	DDRB |= (1<<PB5); // SPI CLK
  d8:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= (1<<PB3); // SPI DO
  da:	23 9a       	sbi	0x04, 3	; 4
	DDRB &= ~(1<<PB4); // SPI DI
  dc:	24 98       	cbi	0x04, 4	; 4
	PORTB |= (1<<PB4); // SPI DI
  de:	2c 9a       	sbi	0x05, 4	; 5
	
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  e0:	81 e5       	ldi	r24, 0x51	; 81
  e2:	8c bd       	out	0x2c, r24	; 44
}
  e4:	08 95       	ret

000000e6 <setup>:

// Setup the ATtiny
void setup(void) {
	sei(); // Turn on interrupts
  e6:	78 94       	sei
}
  e8:	08 95       	ret

000000ea <mirf_init>:

// Initializes pins ans interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
void mirf_init(void) {
	// Define CSN and CE as Output and set them to default
	DDRB |= (1<<CE);
  ea:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= (1<<CSN);
  ec:	22 9a       	sbi	0x04, 2	; 4
	mirf_CE_lo;
  ee:	29 98       	cbi	0x05, 1	; 5
	mirf_CSN_hi;
  f0:	2a 9a       	sbi	0x05, 2	; 5
	
	spi_init(); // Initialise SPI
  f2:	0e 94 6c 00 	call	0xd8	; 0xd8 <spi_init>
}
  f6:	08 95       	ret

000000f8 <mirf_status>:
	TX_POWERUP;
}

// Read the status register
uint8_t mirf_status(void) {
	mirf_CSN_lo; // Pull down chip select
  f8:	2a 98       	cbi	0x05, 2	; 5
#define T4S 8
#define T8S 9

// SPI transfer 1 byte and return the result
uint8_t spi_transfer(uint8_t data) {
	SPDR = data;
  fa:	87 e0       	ldi	r24, 0x07	; 7
  fc:	8e bd       	out	0x2e, r24	; 46
	
	while(!(SPSR & (1<<SPIF)));
  fe:	0d b4       	in	r0, 0x2d	; 45
 100:	07 fe       	sbrs	r0, 7
 102:	fd cf       	rjmp	.-6      	; 0xfe <mirf_status+0x6>

	return SPDR;
 104:	8e b5       	in	r24, 0x2e	; 46
#define T4S 8
#define T8S 9

// SPI transfer 1 byte and return the result
uint8_t spi_transfer(uint8_t data) {
	SPDR = data;
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	8e bd       	out	0x2e, r24	; 46
	
	while(!(SPSR & (1<<SPIF)));
 10a:	0d b4       	in	r0, 0x2d	; 45
 10c:	07 fe       	sbrs	r0, 7
 10e:	fd cf       	rjmp	.-6      	; 0x10a <mirf_status+0x12>

	return SPDR;
 110:	8e b5       	in	r24, 0x2e	; 46
	spi_transfer(R_REGISTER | (REGISTER_MASK & STATUS));
	uint8_t status = spi_transfer(NOP); // Read status register
	mirf_CSN_hi; // Pull up chip select
 112:	2a 9a       	sbi	0x05, 2	; 5
	return status;
}
 114:	08 95       	ret

00000116 <mirf_data_ready>:

// Checks if data is available for reading
uint8_t mirf_data_ready(void) {
	mirf_CSN_lo; // Pull down chip select
 116:	2a 98       	cbi	0x05, 2	; 5
#define T4S 8
#define T8S 9

// SPI transfer 1 byte and return the result
uint8_t spi_transfer(uint8_t data) {
	SPDR = data;
 118:	87 e0       	ldi	r24, 0x07	; 7
 11a:	8e bd       	out	0x2e, r24	; 46
	
	while(!(SPSR & (1<<SPIF)));
 11c:	0d b4       	in	r0, 0x2d	; 45
 11e:	07 fe       	sbrs	r0, 7
 120:	fd cf       	rjmp	.-6      	; 0x11c <mirf_data_ready+0x6>

	return SPDR;
 122:	8e b5       	in	r24, 0x2e	; 46
#define T4S 8
#define T8S 9

// SPI transfer 1 byte and return the result
uint8_t spi_transfer(uint8_t data) {
	SPDR = data;
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	8e bd       	out	0x2e, r24	; 46
	
	while(!(SPSR & (1<<SPIF)));
 128:	0d b4       	in	r0, 0x2d	; 45
 12a:	07 fe       	sbrs	r0, 7
 12c:	fd cf       	rjmp	.-6      	; 0x128 <mirf_data_ready+0x12>

	return SPDR;
 12e:	8e b5       	in	r24, 0x2e	; 46
	spi_transfer(R_REGISTER | (REGISTER_MASK & STATUS));
	uint8_t status = spi_transfer(NOP); // Read status register
	mirf_CSN_hi; // Pull up chip select
 130:	2a 9a       	sbi	0x05, 2	; 5
	return status & (1<<RX_DR);
}
 132:	80 74       	andi	r24, 0x40	; 64
 134:	08 95       	ret

00000136 <mirf_max_rt_reached>:

// Checks if MAX_RT has been reached
uint8_t mirf_max_rt_reached(void) {
	mirf_CSN_lo; // Pull down chip select
 136:	2a 98       	cbi	0x05, 2	; 5
#define T4S 8
#define T8S 9

// SPI transfer 1 byte and return the result
uint8_t spi_transfer(uint8_t data) {
	SPDR = data;
 138:	87 e0       	ldi	r24, 0x07	; 7
 13a:	8e bd       	out	0x2e, r24	; 46
	
	while(!(SPSR & (1<<SPIF)));
 13c:	0d b4       	in	r0, 0x2d	; 45
 13e:	07 fe       	sbrs	r0, 7
 140:	fd cf       	rjmp	.-6      	; 0x13c <mirf_max_rt_reached+0x6>

	return SPDR;
 142:	8e b5       	in	r24, 0x2e	; 46
#define T4S 8
#define T8S 9

// SPI transfer 1 byte and return the result
uint8_t spi_transfer(uint8_t data) {
	SPDR = data;
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	8e bd       	out	0x2e, r24	; 46
	
	while(!(SPSR & (1<<SPIF)));
 148:	0d b4       	in	r0, 0x2d	; 45
 14a:	07 fe       	sbrs	r0, 7
 14c:	fd cf       	rjmp	.-6      	; 0x148 <mirf_max_rt_reached+0x12>

	return SPDR;
 14e:	8e b5       	in	r24, 0x2e	; 46
	spi_transfer(R_REGISTER | (REGISTER_MASK & STATUS));
	uint8_t status = spi_transfer(NOP); // Read status register
	mirf_CSN_hi; // Pull up chip select
 150:	2a 9a       	sbi	0x05, 2	; 5
	return status & (1<<MAX_RT);
}
 152:	80 71       	andi	r24, 0x10	; 16
 154:	08 95       	ret

00000156 <mirf_config_register>:
	mirf_config_register(STATUS,(1<<RX_DR)); // Reset status register
}

// Write one byte into the MiRF register
void mirf_config_register(uint8_t reg, uint8_t value) {
	mirf_CSN_lo;
 156:	2a 98       	cbi	0x05, 2	; 5
	spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 158:	8f 71       	andi	r24, 0x1F	; 31
 15a:	80 62       	ori	r24, 0x20	; 32
#define T4S 8
#define T8S 9

// SPI transfer 1 byte and return the result
uint8_t spi_transfer(uint8_t data) {
	SPDR = data;
 15c:	8e bd       	out	0x2e, r24	; 46
	
	while(!(SPSR & (1<<SPIF)));
 15e:	0d b4       	in	r0, 0x2d	; 45
 160:	07 fe       	sbrs	r0, 7
 162:	fd cf       	rjmp	.-6      	; 0x15e <mirf_config_register+0x8>

	return SPDR;
 164:	8e b5       	in	r24, 0x2e	; 46
#define T4S 8
#define T8S 9

// SPI transfer 1 byte and return the result
uint8_t spi_transfer(uint8_t data) {
	SPDR = data;
 166:	6e bd       	out	0x2e, r22	; 46
	
	while(!(SPSR & (1<<SPIF)));
 168:	0d b4       	in	r0, 0x2d	; 45
 16a:	07 fe       	sbrs	r0, 7
 16c:	fd cf       	rjmp	.-6      	; 0x168 <mirf_config_register+0x12>

	return SPDR;
 16e:	8e b5       	in	r24, 0x2e	; 46
	spi_transfer(value);
	mirf_CSN_hi;
 170:	2a 9a       	sbi	0x05, 2	; 5
}
 172:	08 95       	ret

00000174 <mirf_get_data>:
	mirf_CSN_hi; // Pull up chip select
	return status & (1<<MAX_RT);
}

// Reads mirf_PAYLOAD bytes into data array
void mirf_get_data(uint8_t *data) {
 174:	9c 01       	movw	r18, r24
	mirf_CSN_lo; // Pull down chip select
 176:	2a 98       	cbi	0x05, 2	; 5
#define T4S 8
#define T8S 9

// SPI transfer 1 byte and return the result
uint8_t spi_transfer(uint8_t data) {
	SPDR = data;
 178:	81 e6       	ldi	r24, 0x61	; 97
 17a:	8e bd       	out	0x2e, r24	; 46
	
	while(!(SPSR & (1<<SPIF)));
 17c:	0d b4       	in	r0, 0x2d	; 45
 17e:	07 fe       	sbrs	r0, 7
 180:	fd cf       	rjmp	.-6      	; 0x17c <mirf_get_data+0x8>

	return SPDR;
 182:	8e b5       	in	r24, 0x2e	; 46
	spi_transfer(R_RX_PAYLOAD); // Send cmd to read rx payload
	spi_read_data(data, mirf_PAYLOAD); // Read payload
 184:	c9 01       	movw	r24, r18
 186:	65 e0       	ldi	r22, 0x05	; 5
 188:	0e 94 5f 00 	call	0xbe	; 0xbe <spi_read_data>
	mirf_CSN_hi; // Pull up chip select
 18c:	2a 9a       	sbi	0x05, 2	; 5
	mirf_config_register(STATUS,(1<<RX_DR)); // Reset status register
 18e:	87 e0       	ldi	r24, 0x07	; 7
 190:	60 e4       	ldi	r22, 0x40	; 64
 192:	0e 94 ab 00 	call	0x156	; 0x156 <mirf_config_register>
}
 196:	08 95       	ret

00000198 <mirf_read_register>:
	mirf_CSN_hi;
}

// Reads an array of bytes from the MiRF registers.
void mirf_read_register(uint8_t reg, uint8_t *value, uint8_t len) {
	mirf_CSN_lo;
 198:	2a 98       	cbi	0x05, 2	; 5
	spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
 19a:	8f 71       	andi	r24, 0x1F	; 31
#define T4S 8
#define T8S 9

// SPI transfer 1 byte and return the result
uint8_t spi_transfer(uint8_t data) {
	SPDR = data;
 19c:	8e bd       	out	0x2e, r24	; 46
	
	while(!(SPSR & (1<<SPIF)));
 19e:	0d b4       	in	r0, 0x2d	; 45
 1a0:	07 fe       	sbrs	r0, 7
 1a2:	fd cf       	rjmp	.-6      	; 0x19e <mirf_read_register+0x6>

	return SPDR;
 1a4:	8e b5       	in	r24, 0x2e	; 46
	spi_read_data(value, len);
 1a6:	cb 01       	movw	r24, r22
 1a8:	64 2f       	mov	r22, r20
 1aa:	0e 94 5f 00 	call	0xbe	; 0xbe <spi_read_data>
	mirf_CSN_hi;
 1ae:	2a 9a       	sbi	0x05, 2	; 5
}
 1b0:	08 95       	ret

000001b2 <mirf_write_register>:

// Writes an array of bytes into the MiRF register
void mirf_write_register(uint8_t reg, uint8_t *value, uint8_t len) {
	mirf_CSN_lo;
 1b2:	2a 98       	cbi	0x05, 2	; 5
	spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 1b4:	8f 71       	andi	r24, 0x1F	; 31
 1b6:	80 62       	ori	r24, 0x20	; 32
#define T4S 8
#define T8S 9

// SPI transfer 1 byte and return the result
uint8_t spi_transfer(uint8_t data) {
	SPDR = data;
 1b8:	8e bd       	out	0x2e, r24	; 46
	
	while(!(SPSR & (1<<SPIF)));
 1ba:	0d b4       	in	r0, 0x2d	; 45
 1bc:	07 fe       	sbrs	r0, 7
 1be:	fd cf       	rjmp	.-6      	; 0x1ba <mirf_write_register+0x8>

	return SPDR;
 1c0:	8e b5       	in	r24, 0x2e	; 46
 1c2:	fb 01       	movw	r30, r22
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	08 c0       	rjmp	.+16     	; 0x1d8 <mirf_write_register+0x26>

// Write data using SPI
void spi_write_data(uint8_t * dataout, uint8_t len) {
	uint8_t i;
	for (i = 0; i < len; i++) {
		spi_transfer(dataout[i]);
 1c8:	80 81       	ld	r24, Z
#define T4S 8
#define T8S 9

// SPI transfer 1 byte and return the result
uint8_t spi_transfer(uint8_t data) {
	SPDR = data;
 1ca:	8e bd       	out	0x2e, r24	; 46
	
	while(!(SPSR & (1<<SPIF)));
 1cc:	0d b4       	in	r0, 0x2d	; 45
 1ce:	07 fe       	sbrs	r0, 7
 1d0:	fd cf       	rjmp	.-6      	; 0x1cc <mirf_write_register+0x1a>

	return SPDR;
 1d2:	8e b5       	in	r24, 0x2e	; 46
}

// Write data using SPI
void spi_write_data(uint8_t * dataout, uint8_t len) {
	uint8_t i;
	for (i = 0; i < len; i++) {
 1d4:	9f 5f       	subi	r25, 0xFF	; 255
 1d6:	31 96       	adiw	r30, 0x01	; 1
 1d8:	94 17       	cp	r25, r20
 1da:	b0 f3       	brcs	.-20     	; 0x1c8 <mirf_write_register+0x16>
	spi_write_data(value, len);
	mirf_CSN_hi;
 1dc:	2a 9a       	sbi	0x05, 2	; 5
}
 1de:	08 95       	ret

000001e0 <mirf_config>:
	spi_init(); // Initialise SPI
}

// Sets the important registers in the MiRF module and powers the module
// in receiving mode
void mirf_config(void) {
 1e0:	0f 93       	push	r16
 1e2:	1f 93       	push	r17
	// Set RF channel
	mirf_config_register(RF_CH, mirf_CH);
 1e4:	85 e0       	ldi	r24, 0x05	; 5
 1e6:	65 e0       	ldi	r22, 0x05	; 5
 1e8:	0e 94 ab 00 	call	0x156	; 0x156 <mirf_config_register>
	
	// Set length of incoming payload 
	mirf_config_register(RX_PW_P0, mirf_PAYLOAD);
 1ec:	81 e1       	ldi	r24, 0x11	; 17
 1ee:	65 e0       	ldi	r22, 0x05	; 5
 1f0:	0e 94 ab 00 	call	0x156	; 0x156 <mirf_config_register>
	mirf_config_register(RX_PW_P1, mirf_PAYLOAD);
 1f4:	82 e1       	ldi	r24, 0x12	; 18
 1f6:	65 e0       	ldi	r22, 0x05	; 5
 1f8:	0e 94 ab 00 	call	0x156	; 0x156 <mirf_config_register>
	
	// Set auto retransmit delay to 500uS and leave auto retransmit count to 3
	mirf_config_register(SETUP_RETR, (1<<4) | 3);
 1fc:	84 e0       	ldi	r24, 0x04	; 4
 1fe:	63 e1       	ldi	r22, 0x13	; 19
 200:	0e 94 ab 00 	call	0x156	; 0x156 <mirf_config_register>
	
	// Set RADDR and TADDR
	mirf_write_register(RX_ADDR_P0, TADDR, 5);
 204:	00 e0       	ldi	r16, 0x00	; 0
 206:	11 e0       	ldi	r17, 0x01	; 1
 208:	8a e0       	ldi	r24, 0x0A	; 10
 20a:	b8 01       	movw	r22, r16
 20c:	45 e0       	ldi	r20, 0x05	; 5
 20e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <mirf_write_register>
	mirf_write_register(RX_ADDR_P1, RADDR, 5);
 212:	8b e0       	ldi	r24, 0x0B	; 11
 214:	66 e0       	ldi	r22, 0x06	; 6
 216:	71 e0       	ldi	r23, 0x01	; 1
 218:	45 e0       	ldi	r20, 0x05	; 5
 21a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <mirf_write_register>
	mirf_write_register(TX_ADDR, TADDR, 5);
 21e:	80 e1       	ldi	r24, 0x10	; 16
 220:	b8 01       	movw	r22, r16
 222:	45 e0       	ldi	r20, 0x05	; 5
 224:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <mirf_write_register>
	
	// Enable RX_ADDR_P0 and RX_ADDR_P1 address matching since we also enable auto acknowledgement
	mirf_config_register(EN_RXADDR, (1<<ERX_P0 | 1<<ERX_P1));
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	63 e0       	ldi	r22, 0x03	; 3
 22c:	0e 94 ab 00 	call	0x156	; 0x156 <mirf_config_register>
	
	// Power up in transmitter mode
	TX_POWERUP;
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	6a e0       	ldi	r22, 0x0A	; 10
 234:	0e 94 ab 00 	call	0x156	; 0x156 <mirf_config_register>
}
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	08 95       	ret

0000023e <mirf_transmit_data>:
	spi_write_data(value, len);
	mirf_CSN_hi;
}

// Send data and wait for an ACK
uint8_t mirf_transmit_data(void) {
 23e:	0f 93       	push	r16
 240:	1f 93       	push	r17
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
	TX_POWERUP; // Power up to transmitter mode
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	6a e0       	ldi	r22, 0x0A	; 10
 24a:	0e 94 ab 00 	call	0x156	; 0x156 <mirf_config_register>
	
	mirf_CSN_lo; // Pull down chip select
 24e:	2a 98       	cbi	0x05, 2	; 5
#define T4S 8
#define T8S 9

// SPI transfer 1 byte and return the result
uint8_t spi_transfer(uint8_t data) {
	SPDR = data;
 250:	81 ee       	ldi	r24, 0xE1	; 225
 252:	8e bd       	out	0x2e, r24	; 46
	
	while(!(SPSR & (1<<SPIF)));
 254:	0d b4       	in	r0, 0x2d	; 45
 256:	07 fe       	sbrs	r0, 7
 258:	fd cf       	rjmp	.-6      	; 0x254 <mirf_transmit_data+0x16>

	return SPDR;
 25a:	8e b5       	in	r24, 0x2e	; 46
	spi_transfer(FLUSH_TX); // Write cmd to flush tx fifo
	mirf_CSN_hi; // Pull up chip select
 25c:	2a 9a       	sbi	0x05, 2	; 5
	
	mirf_CSN_lo;  // Pull down chip select
 25e:	2a 98       	cbi	0x05, 2	; 5
#define T4S 8
#define T8S 9

// SPI transfer 1 byte and return the result
uint8_t spi_transfer(uint8_t data) {
	SPDR = data;
 260:	80 ea       	ldi	r24, 0xA0	; 160
 262:	8e bd       	out	0x2e, r24	; 46
	
	while(!(SPSR & (1<<SPIF)));
 264:	0d b4       	in	r0, 0x2d	; 45
 266:	07 fe       	sbrs	r0, 7
 268:	fd cf       	rjmp	.-6      	; 0x264 <mirf_transmit_data+0x26>

	return SPDR;
 26a:	8e b5       	in	r24, 0x2e	; 46
 26c:	ec e0       	ldi	r30, 0x0C	; 12
 26e:	f1 e0       	ldi	r31, 0x01	; 1

// Write data using SPI
void spi_write_data(uint8_t * dataout, uint8_t len) {
	uint8_t i;
	for (i = 0; i < len; i++) {
		spi_transfer(dataout[i]);
 270:	80 81       	ld	r24, Z
#define T4S 8
#define T8S 9

// SPI transfer 1 byte and return the result
uint8_t spi_transfer(uint8_t data) {
	SPDR = data;
 272:	8e bd       	out	0x2e, r24	; 46
	
	while(!(SPSR & (1<<SPIF)));
 274:	0d b4       	in	r0, 0x2d	; 45
 276:	07 fe       	sbrs	r0, 7
 278:	fd cf       	rjmp	.-6      	; 0x274 <mirf_transmit_data+0x36>

	return SPDR;
 27a:	8e b5       	in	r24, 0x2e	; 46
 27c:	31 96       	adiw	r30, 0x01	; 1
}

// Write data using SPI
void spi_write_data(uint8_t * dataout, uint8_t len) {
	uint8_t i;
	for (i = 0; i < len; i++) {
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	e1 31       	cpi	r30, 0x11	; 17
 282:	f8 07       	cpc	r31, r24
 284:	a9 f7       	brne	.-22     	; 0x270 <mirf_transmit_data+0x32>
	spi_transfer(W_TX_PAYLOAD); // Write cmd to write payload
	spi_write_data(data_out, mirf_PAYLOAD); // Write payload
	mirf_CSN_hi; // Pull up chip select
 286:	2a 9a       	sbi	0x05, 2	; 5
	
	mirf_CE_hi; // Start transmission
 288:	29 9a       	sbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 28a:	85 e0       	ldi	r24, 0x05	; 5
 28c:	8a 95       	dec	r24
 28e:	f1 f7       	brne	.-4      	; 0x28c <mirf_transmit_data+0x4e>
	_delay_us(15);
	mirf_CE_lo;
 290:	29 98       	cbi	0x05, 1	; 5
 292:	c0 e0       	ldi	r28, 0x00	; 0
 294:	d0 e0       	ldi	r29, 0x00	; 0
 296:	06 ea       	ldi	r16, 0xA6	; 166
	
	int waitcount = 0;
	while (!(mirf_status() & (1<<TX_DS))) { // Wait until we receive an ACK back
		_delay_us(500); // Wait the auto retransmit time
		if (mirf_status() & (1<<MAX_RT)) { // If maximum retries reached
 298:	15 e0       	ldi	r17, 0x05	; 5
 29a:	1a c0       	rjmp	.+52     	; 0x2d0 <mirf_transmit_data+0x92>
 29c:	80 2f       	mov	r24, r16
 29e:	8a 95       	dec	r24
 2a0:	f1 f7       	brne	.-4      	; 0x29e <mirf_transmit_data+0x60>
 2a2:	0e 94 7c 00 	call	0xf8	; 0xf8 <mirf_status>
 2a6:	84 ff       	sbrs	r24, 4
 2a8:	09 c0       	rjmp	.+18     	; 0x2bc <mirf_transmit_data+0x7e>
			mirf_config_register(STATUS, 1<<MAX_RT); // Reset maximum retries to be able to transmit again next time
 2aa:	87 e0       	ldi	r24, 0x07	; 7
 2ac:	60 e1       	ldi	r22, 0x10	; 16
 2ae:	0e 94 ab 00 	call	0x156	; 0x156 <mirf_config_register>
			mirf_CE_hi;
 2b2:	29 9a       	sbi	0x05, 1	; 5
 2b4:	81 2f       	mov	r24, r17
 2b6:	8a 95       	dec	r24
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <mirf_transmit_data+0x78>
			_delay_us(15);
			mirf_CE_lo;
 2ba:	29 98       	cbi	0x05, 1	; 5
		}
		waitcount++;
 2bc:	21 96       	adiw	r28, 0x01	; 1
		if (waitcount >= 10) { // If we haven't heard back in 5ms, exit
 2be:	ca 30       	cpi	r28, 0x0A	; 10
 2c0:	d1 05       	cpc	r29, r1
 2c2:	31 f4       	brne	.+12     	; 0x2d0 <mirf_transmit_data+0x92>
			mirf_config_register(STATUS, 1<<MAX_RT); // Reset maximum retries to be able to transmit again next time
 2c4:	87 e0       	ldi	r24, 0x07	; 7
 2c6:	60 e1       	ldi	r22, 0x10	; 16
 2c8:	0e 94 ab 00 	call	0x156	; 0x156 <mirf_config_register>
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	09 c0       	rjmp	.+18     	; 0x2e2 <mirf_transmit_data+0xa4>
	mirf_CE_hi; // Start transmission
	_delay_us(15);
	mirf_CE_lo;
	
	int waitcount = 0;
	while (!(mirf_status() & (1<<TX_DS))) { // Wait until we receive an ACK back
 2d0:	0e 94 7c 00 	call	0xf8	; 0xf8 <mirf_status>
 2d4:	85 ff       	sbrs	r24, 5
 2d6:	e2 cf       	rjmp	.-60     	; 0x29c <mirf_transmit_data+0x5e>
			mirf_config_register(STATUS, 1<<MAX_RT); // Reset maximum retries to be able to transmit again next time
			return 0;
		}
	}
	
	mirf_config_register(STATUS,(1<<TX_DS)); // Reset status register
 2d8:	87 e0       	ldi	r24, 0x07	; 7
 2da:	60 e2       	ldi	r22, 0x20	; 32
 2dc:	0e 94 ab 00 	call	0x156	; 0x156 <mirf_config_register>
 2e0:	81 e0       	ldi	r24, 0x01	; 1
	
	return 1;
}
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	1f 91       	pop	r17
 2e8:	0f 91       	pop	r16
 2ea:	08 95       	ret

000002ec <main>:
#include "setup.c"
#include "mirf.c"

uint8_t data_out[5] = "pir1c";

int main(void) {
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
}

// Setup the ATtiny
void setup(void) {
	sei(); // Turn on interrupts
 2f0:	78 94       	sei
	setup();
	mirf_init();
 2f2:	0e 94 75 00 	call	0xea	; 0xea <mirf_init>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2f6:	84 ed       	ldi	r24, 0xD4	; 212
 2f8:	90 e3       	ldi	r25, 0x30	; 48
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <main+0xe>
	_delay_ms(50);
	mirf_config();
 2fe:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <mirf_config>
 302:	20 e1       	ldi	r18, 0x10	; 16
 304:	37 e2       	ldi	r19, 0x27	; 39
 306:	c9 e1       	ldi	r28, 0x19	; 25
 308:	d0 e0       	ldi	r29, 0x00	; 0
 30a:	05 c0       	rjmp	.+10     	; 0x316 <main+0x2a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 30c:	ce 01       	movw	r24, r28
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <main+0x22>
 312:	21 50       	subi	r18, 0x01	; 1
 314:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 316:	21 15       	cp	r18, r1
 318:	31 05       	cpc	r19, r1
 31a:	c1 f7       	brne	.-16     	; 0x30c <main+0x20>
	while(1) {
		
		_delay_ms(1000);
		
		// Let server know the PIR was triggered
		mirf_transmit_data();
 31c:	0e 94 1f 01 	call	0x23e	; 0x23e <mirf_transmit_data>
 320:	88 e8       	ldi	r24, 0x88	; 136
 322:	93 e1       	ldi	r25, 0x13	; 19
 324:	fe 01       	movw	r30, r28
 326:	31 97       	sbiw	r30, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <main+0x3a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 32a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 32c:	d9 f7       	brne	.-10     	; 0x324 <main+0x38>
 32e:	20 e1       	ldi	r18, 0x10	; 16
 330:	37 e2       	ldi	r19, 0x27	; 39
 332:	ec cf       	rjmp	.-40     	; 0x30c <main+0x20>

00000334 <_exit>:
 334:	f8 94       	cli

00000336 <__stop_program>:
 336:	ff cf       	rjmp	.-2      	; 0x336 <__stop_program>
